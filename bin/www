#!/usr/bin/env node

const http = require('http');
const browserSync = require('browser-sync').create();

const app = require('../app');

const port = normalizePort(process.env.PORT);
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
if (process.env.NODE_ENV === 'development') {
  server.on('listening', onListening);
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  browserSync.init(
    {
      ui: false,
      notify: false,
      online: false,
      open: false,
      startPath: '/api-docs',
      proxy: `localhost:${port}`,
      port: port + 1,
    },
    browserSync.reload,
  );
}
